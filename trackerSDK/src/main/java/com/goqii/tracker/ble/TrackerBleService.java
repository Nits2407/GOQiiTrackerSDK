package com.goqii.tracker.ble;import android.app.Service;import android.bluetooth.BluetoothAdapter;import android.bluetooth.BluetoothDevice;import android.bluetooth.BluetoothGatt;import android.bluetooth.BluetoothGattCallback;import android.bluetooth.BluetoothGattCharacteristic;import android.bluetooth.BluetoothGattDescriptor;import android.bluetooth.BluetoothGattService;import android.bluetooth.BluetoothManager;import android.bluetooth.BluetoothProfile;import android.content.Context;import android.content.Intent;import android.os.Binder;import android.os.IBinder;import android.util.Log;import com.goqii.tracker.util.BleUtils;import com.goqii.tracker.util.Utils;import java.util.LinkedList;import java.util.List;import java.util.Queue;import java.util.UUID;public final class TrackerBleService extends Service {    private static final String TAG = "BleService";    private static final UUID NOTIY = UUID            .fromString("00002902-0000-1000-8000-00805f9b34fb");    private static final UUID SERVICE_DATA = UUID            .fromString("0000fff0-0000-1000-8000-00805f9b34fb");    private static final UUID DATA_Characteristic = UUID            .fromString("0000fff6-0000-1000-8000-00805f9b34fb");    private static final UUID NOTIY_Characteristic = UUID            .fromString("0000fff7-0000-1000-8000-00805f9b34fb");    public final static String ACTION_GATT_CONNECTED =            "com.goqii.tracker.service.ACTION_GATT_CONNECTED";    public final static String ACTION_GATT_onDescriptorWrite = "com.goqii.tracker.service.onDescriptorWrite";    public final static String ACTION_GATT_DISCONNECTED = "com.goqii.tracker.service.ACTION_GATT_DISCONNECTED";    public final static String ACTION_DATA_AVAILABLE = "com.goqii.tracker.service.ACTION_DATA_AVAILABLE";    private final IBinder kBinder = new LocalBinder();    private BluetoothManager bluetoothManager;    private BluetoothAdapter mBluetoothAdapter;    private BluetoothGatt mGatt;    private boolean isConnected;    private BluetoothGattService service;    @Override    public IBinder onBind(Intent intent) {        initAdapter();        return kBinder;    }    @Override    public boolean onUnbind(Intent intent) {        return super.onUnbind(intent);    }    private String address;    public void initBluetoothDevice(final String address, final Context context) {        this.address = address;        final BluetoothDevice device = mBluetoothAdapter                .getRemoteDevice(address);        if (mGatt != null) {            mGatt.close();            mGatt = null;        }        // TODO Auto-generated method stub        mGatt = device.connectGatt(context, true, bleGattCallback);        BleManager.getInstance().getListener().connectionStatus(BluetoothProfile.STATE_CONNECTING);        if (mGatt == null) {            System.out.println(device.getAddress() + "gatt is null");        }    }    public void cleanUp() {        closeGatt();    }    private void closeGatt() {        if (mGatt != null)            mGatt.close();    }    private void initAdapter() {        if (bluetoothManager == null) {            bluetoothManager = (BluetoothManager) getSystemService(Context.BLUETOOTH_SERVICE);            if (bluetoothManager == null) {                return;            }        }        mBluetoothAdapter = bluetoothManager.getAdapter();    }    public void disconnect() {        if (mGatt == null)            return;        mGatt.disconnect();        isConnected = false;    }    public class LocalBinder extends Binder {        public com.goqii.tracker.ble.TrackerBleService getService() {            return com.goqii.tracker.ble.TrackerBleService.this;        }    }    private BluetoothGattCallback bleGattCallback = new BluetoothGattCallback() {        @Override        public void onConnectionStateChange(BluetoothGatt gatt, int status,                                            int newState) {            String action;            Log.i(TAG, "onConnectionStateChange:  status" + status + " newstate " + newState);            if (newState == BluetoothProfile.STATE_CONNECTED) {                action = ACTION_GATT_CONNECTED;                //broadcastUpdate(action);                Log.e("SkippingRopeBleServiec", "discover Services");                gatt.discoverServices();            } else if (newState == BluetoothProfile.STATE_DISCONNECTED) {                isConnected = false;                action = ACTION_GATT_DISCONNECTED;                Log.i(TAG, "Disconnected from GATT server.");                //broadcastUpdate(action);                BleUtils.sendBleOperation(ACTION_GATT_DISCONNECTED);            }            BleManager.getInstance().getListener().connectionStatus(newState);        }        @Override        public void onServicesDiscovered(BluetoothGatt gatt, int status) {            // if (mGatt == null)            // return;            if (status == BluetoothGatt.GATT_SUCCESS) {                setCharacteristicNotification();                Log.e("SkippingRopeBleServiec", "count " + gatt.getServices().size());                System.out.println("discover services " + status);            } else {                Log.w("servieDiscovered", "onServicesDiscovered received: "                        + status);            }        }        public void onCharacteristicRead(BluetoothGatt gatt,                                         BluetoothGattCharacteristic characteristic,                                         int status) {            if (status == BluetoothGatt.GATT_SUCCESS) {                broadcastUpdate(ACTION_DATA_AVAILABLE, characteristic, gatt                        .getDevice().getAddress());                TrackerCommands.readResponse(TrackerBleService.this, characteristic.getValue());            } else {                Log.i("onCharacteristicRead", "onCharacteristicRead false "                        + status + characteristic.toString());            }        }        public void onDescriptorWrite(BluetoothGatt gatt,                                      BluetoothGattDescriptor descriptor, int status) {            Log.e("SkippingRopeBleServiec", descriptor.getCharacteristic().getUuid().toString());            if (status == BluetoothGatt.GATT_SUCCESS) {                isConnected = true;                Log.e("SkippingRopeBleServiec", "called");                BleUtils.sendBleOperation(ACTION_GATT_onDescriptorWrite);                Log.e("SkippingRopeBleServiec", "Connected");                TrackerCommands.getFirmware();            }        }        public void onCharacteristicChanged(BluetoothGatt gatt,                                            BluetoothGattCharacteristic characteristic) {            if (mGatt == null)                return;            Log.e(TAG, "onCharacteristicChanged: " + Utils.byte2Hex(characteristic.getValue()));            broadcastUpdate(ACTION_DATA_AVAILABLE, characteristic, gatt                    .getDevice().getAddress());            BleManager.getInstance().getListener().dataFound(characteristic.getValue());            TrackerCommands.readResponse(TrackerBleService.this, characteristic.getValue());        }        public void onCharacteristicWrite(BluetoothGatt gatt,                                          BluetoothGattCharacteristic characteristic, int status) {            if (status == BluetoothGatt.GATT_SUCCESS) {                nextQueue();            }        }    };    private void broadcastUpdate(String action) {        Intent intent = new Intent(action);        sendBroadcast(intent);    }    private void broadcastUpdate(String action,                                 BluetoothGattCharacteristic characteristic, String mac) {        byte[] data = characteristic.getValue();        Intent intent = new Intent();        intent.setAction(action);        intent.putExtra("response", data);        sendBroadcast(intent);    }    public void writeValue(byte[] value) {        if (mGatt == null || value == null) return;        BluetoothGattService service = mGatt.getService(SERVICE_DATA);        if (service == null) return;        BluetoothGattCharacteristic characteristic = service.getCharacteristic(DATA_Characteristic);        if (characteristic == null) return;        characteristic.setValue(value);        Log.i(TAG, "writeValue: " + Utils.byte2Hex(value));        mGatt.writeCharacteristic(characteristic);    }/*    public void setCharacteristicNotification() {        // TODO Auto-generated method stub        if (mGatt == null) return;        service = mGatt.getService(SERVICE_DATA);        if (service == null) return;        List<BluetoothGattCharacteristic> characteristics = service.getCharacteristics();        subscribeCharactarstics(service, NOTIY_Characteristic);    }*/    public void setCharacteristicNotification() {        if (mGatt == null) return;        BluetoothGattService service = mGatt.getService(SERVICE_DATA);        if (service == null) return;        BluetoothGattCharacteristic characteristic = service.getCharacteristic(NOTIY_Characteristic);        if (characteristic == null) return;        mGatt.setCharacteristicNotification(characteristic, true);        try {            Thread.sleep(20);        } catch (InterruptedException e) {            e.printStackTrace();        }        BluetoothGattDescriptor descriptor = characteristic                .getDescriptor(NOTIY);        if (descriptor == null) return;        descriptor.setValue(BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE);        //descriptor.setValue(BluetoothGattDescriptor.ENABLE_INDICATION_VALUE);        if (mGatt == null) return;        mGatt.writeDescriptor(descriptor);    }    private void subscribeCharactarstics(final BluetoothGattService service, UUID notifyCharacteristic) {            BluetoothGattCharacteristic characteristic = service.getCharacteristic(notifyCharacteristic);            if (characteristic == null) return;            mGatt.setCharacteristicNotification(characteristic, true);            try {            Thread.sleep(1000);            } catch (InterruptedException e) {                e.printStackTrace();            }            BluetoothGattDescriptor descriptor = characteristic                    .getDescriptor(NOTIY);            if (descriptor == null) {                return;            }            descriptor.setValue(BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE);            if (mGatt == null)                return;            boolean isSuccess = mGatt.writeDescriptor(descriptor);        Log.e("SkippingRopeBleServiec", descriptor.getCharacteristic().getUuid().toString() + ":"  + isSuccess);    }    @Override    public void onDestroy() {        // TODO Auto-generated method stub        super.onDestroy();    }    Queue<byte[]> queues = new LinkedList<>();    public void nextQueue() {        final Queue<byte[]> requests = queues;        byte[] data = requests != null ? requests.poll() : null;        writeValue(data);    }    public boolean isConnected() {        return this.isConnected;    }}